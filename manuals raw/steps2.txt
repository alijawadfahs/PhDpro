step 1: initiate the master node and the cluster

kubeadm init --pod-network-cidr 10.244.0.0/16 

(it usually takes up to 10 mins). 

step 2: copy and paste the kubeadm call for the worker nodes. 

step 3: run kubectl as a regular user

sudo cp /etc/kubernetes/admin.conf $HOME/
sudo chown $(id -u):$(id -g) $HOME/admin.conf
export KUBECONFIG=$HOME/admin.conf

step 4: check if all nodes are connected

kubectl get nodes

(before configuring the CNI the nodes won't be ready) 



step 5: configure the CNI and check if all nodes status are ready

curl -sSL https://rawgit.com/coreos/flannel/v0.7.1/Documentation/kube-flannel-rbac.yml | kubectl create -f -
curl -sSL https://rawgit.com/coreos/flannel/v0.7.1/Documentation/kube-flannel.yml | sed "s/amd64/arm/g" | kubectl create -f -

step 6: check that all the pods are running. 

kubectl get po --all-namespaces

(the kube-dns will need the Iptables debug to turn into running state). 

step 7: run a deployment (we consider one of the examples) 

kubectl run hypriot --image=hypriot/rpi-busybox-httpd --replicas=3 --port=80

check the pods of the deployment if they reach the running state. 

step 8: expose the port to access it from the cluster

kubectl expose deployment hypriot --port 80

step 9; First debug is to fix the iptables 

sudo iptables -A FORWARD -i cni0 -j ACCEPT
sudo iptables -A FORWARD -o cni0 -j ACCEPT

run in all nodes

step 10: get the endpoints and curl them 

kubectl get endpoints hypriot

the number of endpoints shall be equal to the number of the replicas otherwise you have to check if all pods are running.
 

step 10: apply the RBAC and Ingress controller

kubectl apply -f https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/traefik-rbac.yaml

kubectl apply -f https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/traefik-ds.yaml

check if a new pod for the ingress controller have been create.

step 11: select a node to handle the ingress

kubectl label node <load balancer-node> nginx-controller=traefik

step 12: create the ingress file and apply 

 cat > hypriot-ingress.yaml <<EOF
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: hypriot
spec:
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: hypriot
          servicePort: 80
EOF

kubectl apply -f hypriot-ingress.yaml

This will enable users from outside the cluster to access the pods 


step 13: check if the ingress is up

kubectl get ing 

the ADDRESS feature is not configured yet. 

step 14: curl from a user outside the cluster, use the IP address of the node that contain the ingress. also you can use browsers normally. 

















